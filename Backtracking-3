#TC-o(MN 4^L)
#Sc-o(MN)
class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        for i in range(len(board)):
            for j in range(len(board[0])):
                if self.backtracking(i, j,word,board):
                    return True
        return False
    def backtracking(self,i, j,word,board):
            if ((i < 0) or (i >= len(board)) or (j < 0) or (j >= len(board[i])) or (board[i][j]=='~')):
                return False
            dir={(0,-1),(-1,0),(0,1),(1,0)}
            if board[i][j] == word[0]:
                if(len(word)==1):
                    return True
                prev=board[i][j]
                board[i][j] = "~"
                for d in dir:
                    r=d[0]+i
                    c=d[1]+j
                    if(self.backtracking(r,c,word[1:],board)):
                        return True
                board[i][j] = word[0]
            return False
